schema {
  query: RootQueryType
  mutation: RootMutationType
  subscription: RootSubscriptionType
}

"Tracking codes"
type Tracking {
  source: String!
  medium: String!
  campaign: String!
  content: String!
}

type UserRole {
  org: Org!
  role: String!
}

input SelectActionPage {
  campaignId: Int
}

scalar DateTime

type KeyWithPrivate {
  id: Int!
  public: String!
  private: String!
  name: String!
  active: Boolean!
  expired: Boolean!
  expiredAt: DateTime
}

type SimpleActionPage {
  id: Int!
  name: String!
  locale: String!
}

"GDPR consent data structure"
input ConsentInput {
  "Has contact consented to receiving communication from widget owner?"
  optIn: Boolean!

  "Opt in to the campaign leader"
  leadOptIn: Boolean
}

input NationalityInput {
  "Nationality / issuer of id document"
  country: String!

  "Document type"
  documentType: String

  "Document serial id/number"
  documentNumber: String
}

"GDPR consent data for this org"
type Consent {
  optIn: Boolean!
}

"Tracking codes"
input TrackingInput {
  source: String!
  medium: String!
  campaign: String!
  content: String
}

"Count of actions for particular action type"
type ActionTypeCount {
  "action type"
  actionType: String!

  "count of actions of action type"
  count: Int!
}

enum ContactSchema {
  ECI
  POPULAR_INITIATIVE
  BASIC
}

type RootSubscriptionType {
  actionPageUpserted(orgName: String): PublicActionPage!
}

type ActionCampaign {
  name: String!
  externalId: Int
}

"ActionPage declaration (using the legacy url attribute)"
input ActionPageInputLegacyUrl {
  id: Int
  url: String
  locale: String
  thankYouTemplateRef: String
  extraSupporters: Int
  journey: [String!]
  config: String
}

input SelectKey {
  id: Int
  active: Boolean
  public: String
}

scalar Date

"Count of actions for particular action type"
type AreaCount {
  "area"
  area: String!

  "count of supporters in this area"
  count: Int!
}

"Custom field added to action. For signature it can be contact, for mail it can be subject and body"
input ActionInput {
  "Action Type"
  actionType: String!

  "Other fields that accompany the signature"
  fields: [CustomFieldInput!]
}

input AddKeyInput {
  name: String!
  public: String!
}

input GenKeyInput {
  name: String!
}

"Result of actions query"
type PublicActionsResult {
  fieldKeys: [String!]
  list: [ActionCustomFields]
}

type ActivateKeyResult {
  status: Status!
}

"Campaign statistics"
type CampaignStats {
  "Unique action tagers count"
  supporterCount: Int!

  "Unique action takers by area"
  supporterCountByArea: [AreaCount!]!

  "Unique action takers by org"
  suppoterCountByOrg: [OrgCount!]!

  supporterCountByOthers(orgName: String!): Int!

  "Action counts for selected action types"
  actionCount: [ActionTypeCount!]!
}

type ActionCustomFields {
  actionId: Int!
  actionType: String!
  insertedAt: DateTime!
  fields: [CustomField!]!
}

type Action {
  actionId: Int!
  createdAt: DateTime!
  actionType: String!
  contact: Contact!
  fields: [CustomField!]!
  tracking: Tracking
  campaign: ActionCampaign!
  actionPage: SimpleActionPage!
  privacy: Consent!
}

scalar Json

type RootMutationType {
  """
  Upserts a campaign.

  Creates or appends campaign and it's action pages. In case of append, it
  will change the campaign with the matching name, and action pages with
  matching names. It will create new action pages if you pass new names. No
  Action Pages will be removed (principle of not removing signature data).
  """
  upsertCampaign(
    input: CampaignInput!

    "Org name"
    orgName: String!
  ): Campaign!

  "Deprecated, use upsert_campaign."
  declareCampaign(
    "Action pages of this campaign"
    actionPages: [ActionPageInputLegacyUrl]!

    "Campaign human readable title"
    title: String!

    "Campaign external_id. If provided, it will be used to find campaign. Can be used to rename a campaign"
    externalId: Int

    "Campaign unchanging identifier"
    name: String!

    "Org name"
    orgName: String!
  ): Campaign!

  "Update an Action Page"
  updateActionPage(
    input: ActionPageInput!

    "Action Page id"
    id: Int!
  ): ActionPage!

  """
  Adds a new Action Page based on another Action Page. Intended to be used to
  create a partner action page based off lead's one. Copies: campaign, locale, journey, config, delivery flag
  """
  copyActionPage(
    "Name of Action Page this one is cloned from"
    fromName: String!

    "New Action Page name"
    name: String!

    "Org owner of new Action Page"
    orgName: String!
  ): ActionPage!

  "Adds an action referencing contact data via contactRef"
  addAction(
    "Tracking codes (UTM_*)"
    tracking: TrackingInput

    "Contact reference"
    contactRef: ID!

    "Action data"
    action: ActionInput!

    actionPageId: Int!
  ): ContactReference!

  "Adds an action with contact data"
  addActionContact(
    "Links to previous contact reference"
    contactRef: ID

    "Tracking codes (UTM_*)"
    tracking: TrackingInput

    "Signature action data"
    privacy: ConsentInput!

    "GDPR communication opt"
    contact: ContactInput!

    "Action data"
    action: ActionInput!

    actionPageId: Int!
  ): ContactReference!

  "Link actions with refs to contact with contact reference"
  linkActions(
    "Link actions with these references (if unlinked to supporter)"
    linkRefs: [String!]

    "Contact reference"
    contactRef: ID!

    "Action Page id"
    actionPageId: Int!
  ): ContactReference!

  addOrgUser(input: UserInput!, orgName: String!): User

  deleteOrgUser(email: String!, orgName: String!): DeleteUserResult

  updateOrgUser(input: UserInput!, orgName: String!): User

  addOrg(input: OrgInput!): Org!

  deleteOrg(
    "Name of organisation"
    name: String!
  ): Boolean!

  updateOrg(
    input: OrgInput!

    "Name of organisation, used for lookup, can't be used to change org name"
    name: String!
  ): Org!

  joinOrg(name: String!): JoinOrgResult!

  generateKey(
    input: GenKeyInput!

    "Name of organisation"
    orgName: String!
  ): KeyWithPrivate!

  addKey(
    input: AddKeyInput!

    "Name of organisation"
    orgName: String!
  ): Key!

  "A separate key activate operation, because you also need to add the key to receiving system before it is used"
  activateKey(
    "Key id"
    id: Int!

    orgName: String!
  ): ActivateKeyResult!
}

type RootQueryType {
  "Get a list of campains"
  campaigns(
    "Filter campaigns by name (exact match). If found, returns list of 1 campaign, otherwise an empty list"
    name: String

    "Filter campaigns by title using LIKE format (% means any sequence of characters)"
    title: String
  ): [Campaign!]!

  "Get action page"
  actionPage(
    "Get action page by url the widget is displayed on (DEPRECATED, use name)"
    url: String

    "Get action page by name the widget is displayed on"
    name: String

    "Get action page by id."
    id: Int
  ): PublicActionPage!

  exportActions(
    "Only download opted in contacts and actions (default true)"
    onlyOptIn: Boolean

    "Only download opted in contacts and actions (default true)"
    onlyOptIn: Boolean

    "Limit the number of returned actions"
    limit: Int

    "return only actions created at date time from this argument (inclusive)"
    after: DateTime

    "return only actions with id starting from this argument (inclusive)"
    start: Int

    "Limit results to campaign id"
    campaignId: Int

    "Limit results to campaign name"
    campaignName: String

    "Organization name"
    orgName: String!
  ): [Action]!

  currentUser: User!

  "Organization api (authenticated)"
  org(
    "Name of organisation"
    name: String!
  ): Org!
}

type PublicOrg {
  "Organisation short name"
  name: String!

  "Organisation title (human readable name)"
  title: String!
}

type ActionPage {
  id: Int!

  "Locale for the widget, in i18n format"
  locale: String!

  "Name where the widget is hosted"
  name: String!

  "Reference to thank you email templated of this Action Page"
  thankYouTemplateRef: String

  "List of steps in journey"
  journey: [String!]

  "Config JSON of this action page"
  config: Json!

  "Extra supporters (added to supporters count)"
  extraSupporters: Int!

  "Campaign this widget belongs to. Can be null for trashed action pages"
  campaign: Campaign

  org: PublicOrg
}

type PublicActionPage {
  id: Int!

  "Locale for the widget, in i18n format"
  locale: String!

  "Name where the widget is hosted"
  name: String!

  "Reference to thank you email templated of this Action Page"
  thankYouTemplateRef: String

  "List of steps in journey"
  journey: [String!]!

  "Config JSON of this action page"
  config: Json!

  "Campaign this widget belongs to. Can't be null because trashed action pages are not public"
  campaign: Campaign!

  org: PublicOrg!
}

type DeleteUserResult {
  status: Status!
}

"Count of supporters for particular org"
type OrgCount {
  "org"
  org: PublicOrg!

  "count of supporters registered by org"
  count: Int!
}

"Campaign input"
input CampaignInput {
  "Campaign unchanging identifier"
  name: String!

  "Campaign external_id. If provided, it will be used to find campaign. Can be used to rename a campaign"
  externalId: Int

  "Campaign human readable title"
  title: String

  "Custom config as stringified JSON map"
  config: Json

  "Action pages of this campaign"
  actionPages: [ActionPageInput!]!
}

"Address type which can hold different addres fields."
input AddressInput {
  "Country code (two-letter)."
  country: String

  "Postcode, in format correct for country locale"
  postcode: String

  "Locality, which can be a city/town/village"
  locality: String

  "Region, being province, voyevodship, county"
  region: String

  "Street name"
  street: String

  "Street number"
  streetNumber: String
}

"ActionPage input"
input ActionPageInput {
  """
  Unique NAME identifying ActionPage.

  Does not have to exist, must be unique. Can be a 'technical' identifier
  scoped to particular organization, so it does not have to change when the
  slugs/names change (eg. some.org/1234). However, frontent Widget can
  ask for ActionPage by it's current location.href (but without https://), in which case it is useful
  to make this url match the real widget location.
  """
  name: String

  "2-letter, lowercase, code of ActionPage language"
  locale: String

  "A reference to thank you email template of this ActionPage"
  thankYouTemplateRef: String

  "Extra supporter count. If you want to add a number of signatories you have offline or kept in another system, you can specify the number here."
  extraSupporters: Int

  "List of steps in the journey"
  journey: [String!]

  "JSON string containing Action Page config"
  config: Json
}

type PersonalData {
  "Schema for contact personal information"
  contactSchema: ContactSchema!

  "Email opt in enabled"
  emailOptIn: Boolean!

  "Email opt in template name"
  emailOptInTemplate: String
}

input SelectCampaign {
  id: Int
}

type Campaign {
  id: Int!

  "Internal name of the campaign"
  name: String!

  "External ID (if set)"
  externalId: Int

  "Full, official name of the campaign"
  title: String!

  "Custom config map"
  config: Json!

  "Campaign statistics"
  stats: CampaignStats!

  "Fetch public actions"
  actions(
    "Limit the number of returned actions, default is 10, max is 100)"
    limit: Int!

    "Return actions of this action type"
    actionType: String!
  ): PublicActionsResult!

  org: PublicOrg!
}

"Encryption or sign key with integer id (database)"
type Key {
  id: Int!
  public: String!
  name: String!
  active: Boolean!
  expired: Boolean!
  expiredAt: DateTime
}

type Org {
  "Organization id"
  id: Int!

  "Organisation short name"
  name: String!

  "Organisation title (human readable name)"
  title: String!

  "config"
  config: Json!

  "Personal data settings for this org"
  personalData: PersonalData!

  keys(select: SelectKey): [Key!]!

  key(select: SelectKey!): Key!

  "List campaigns this org is leader or partner of"
  campaigns(select: SelectCampaign): [Campaign!]!

  "List action pages this org has"
  actionPages(select: SelectActionPage): [ActionPage!]!

  "Action Page"
  actionPage(name: String, id: Int): ActionPage!

  "Get campaign this org is leader or partner of by id"
  campaign(id: Int): Campaign!
}

type ContactReference {
  "Contact's reference"
  contactRef: String!

  "Contacts first name"
  firstName: String
}

type Contact {
  contactRef: String!
  payload: String!
  nonce: String
  publicKey: KeyIds
  signKey: KeyIds
}

type JoinOrgResult {
  status: Status!
}

"Custom field with a key and value. Both are strings."
input CustomFieldInput {
  key: String!
  value: String!
  transient: Boolean
}

input OrgInput {
  "Name used to rename"
  name: String

  "Organisation title (human readable name)"
  title: String

  "Schema for contact personal information"
  contactSchema: ContactSchema

  "Email opt in enabled"
  emailOptIn: Boolean

  "Email opt in template name"
  emailOptInTemplate: String

  "Config"
  config: Json
}

"Custom field with a key and value."
type CustomField {
  key: String!
  value: String!
}

input UserInput {
  email: String!
  roles: [String!]
}

"Contact information"
input ContactInput {
  "Full name"
  name: String

  "First name (when you provide full name split into first and last)"
  firstName: String

  "Last name (when you provide full name split into first and last)"
  lastName: String

  "Email"
  email: String

  "Contacts phone number"
  phone: String

  "Date of birth in format YYYY-MM-DD"
  birthDate: Date

  "Contacts address"
  address: AddressInput

  "Nationality information"
  nationality: NationalityInput
}

type KeyIds {
  id: Int!
  public: String!
}

enum Status {
  "Operation awaiting confirmation"
  CONFIRMING

  "Operation completed succesfully"
  SUCCESS
}

type User {
  id: Int!
  email: String!
  roles: [UserRole!]!
}
