schema {
  query: RootQueryType
  mutation: RootMutationType
  subscription: RootSubscriptionType
}

"Tracking codes"
type Tracking {
  source: String!
  medium: String!
  campaign: String!
  content: String!
}

type Signature {
  "Signature id"
  id: Int

  "DateTime of signature (UTC)"
  created: Datetime

  "Encryption nonce in Base64url"
  nonce: String

  "Encrypted contact data in Base64url"
  contact: String

  "Campaign id"
  campaignId: Int

  "Action page id"
  actionPageId: Int

  "Opt in given when adding sig"
  optIn: Boolean
}

type SimpleActionPage {
  id: Int!
  name: String!
  locale: String!
}

type SignatureList {
  "Public key of sender (proca app), in Base64url encoding (RFC 4648 5.)"
  publicKey: String

  "List of returned signatures"
  list: [Signature]
}

"GDPR consent data structure"
input ConsentInput {
  "Has contact consented to receiving communication from widget owner?"
  optIn: Boolean!

  "Opt in to the campaign leader"
  leadOptIn: Boolean
}

"GDPR consent data for this org"
type Consent {
  optIn: Boolean!
}

"Tracking codes"
input TrackingInput {
  source: String!
  medium: String!
  campaign: String!
  content: String
}

"Count of actions for particular action type"
type ActionTypeCount {
  "action type"
  actionType: String!

  "count of actions of action type"
  count: Int!
}

enum ContactSchema {
  POPULAR_INITIATIVE
  BASIC
}

type RootSubscriptionType {
  actionPageUpdated(orgName: String!): ActionPage
}

type ActionCampaign {
  name: String!
  externalId: Int!
}

"ActionPage declaration (using the legacy url attribute)"
input ActionPageInputLegacyUrl {
  id: Int
  url: String
  locale: String
  thankYouTemplateRef: String
  extraSupporters: Int
  journey: [String!]
  config: String
}

"Custom field added to action. For signature it can be contact, for mail it can be subject and body"
input ActionInput {
  "Action Type"
  actionType: String!

  "Other fields that accompany the signature"
  fields: [CustomFieldInput!]
}

"Result of actions query"
type PublicActionsResult {
  fieldKeys: [String!]
  list: [ActionCustomFields]
}

"Campaign statistics"
type CampaignStats {
  "Signature count (naive at the moment)"
  supporterCount: Int

  "Action counts for selected action types"
  actionCount: [ActionTypeCount!]
}

type ActionCustomFields {
  actionType: String!
  insertedAt: Datetime!
  fields: [CustomField!]
}

type Action {
  actionId: Int!
  actionType: String!
  contact: Contact!
  fields: [CustomField!]!
  tracking: Tracking
  campaign: ActionCampaign!
  actionPage: SimpleActionPage!
  privacy: Consent!
}

type RootMutationType {
  """
  Upserts a campaign.

  Creates or appends campaign and it's action pages. In case of append, it
  will change the campaign with the matching name, and action pages with
  matching names. It will create new action pages if you pass new names. No
  Action Pages will be removed (principle of not removing signature data).
  """
  upsertCampaign(
    "Action pages of this campaign"
    actionPages: [ActionPageInput]!

    "Campaign human readable title"
    title: String

    "Campaign external_id. If provided, it will be used to find campaign. Can be used to rename a campaign"
    externalId: Int

    "Campaign unchanging identifier"
    name: String!

    "Org name"
    orgName: String!
  ): Campaign

  "Deprecated, use upsert_campaign."
  declareCampaign(
    "Action pages of this campaign"
    actionPages: [ActionPageInputLegacyUrl]!

    "Campaign human readable title"
    title: String!

    "Campaign external_id. If provided, it will be used to find campaign. Can be used to rename a campaign"
    externalId: Int

    "Campaign unchanging identifier"
    name: String!

    "Org name"
    orgName: String!
  ): Campaign

  "Update an Action Page"
  updateActionPage(
    "JSON string containing Action Page config"
    config: String

    "List of steps in the journey (deprecated, pass in config)"
    journey: [String!]

    "Extra supporter count. If you want to add a number of signatories you have offline or kept in another system, you can specify the number here."
    extraSupporters: Int

    "A reference to thank you email template of this ActionPage"
    thankYouTemplateRef: String

    "2-letter, lowercase, code of ActionPage language"
    locale: String

    """
    Unique NAME identifying ActionPage.

    Does not have to exist, must be unique. Can be a 'technical' identifier
    scoped to particular organization, so it does not have to change when the
    slugs/urls change (eg. https://some.org/1234). However, frontent Widget can
    ask for ActionPage by it's current location.href, in which case it is useful
    to make this url match the real idwget location.
    """
    name: String

    "Action Page id"
    id: Int!
  ): ActionPage

  "Adds an action referencing contact data via contactRef"
  addAction(
    "Tracking codes (UTM_*)"
    tracking: TrackingInput

    "Contact reference"
    contactRef: ID!

    "Action data"
    action: ActionInput!

    actionPageId: Int!
  ): ContactReference

  "Adds an action with contact data"
  addActionContact(
    "Tracking codes (UTM_*)"
    tracking: TrackingInput

    "Signature action data"
    privacy: ConsentInput!

    "GDPR communication opt"
    contact: ContactInput!

    "Action data"
    action: ActionInput!

    actionPageId: Int!
  ): ContactReference

  "Link actions with refs to contact with contact reference"
  linkActions(
    "Link actions with these references (if unlinked to supporter)"
    linkRefs: [String!]

    "Contact reference"
    contactRef: ID!

    "Action Page id"
    actionPageId: Int!
  ): ContactReference

  updateOrg(
    "Email opt in template name"
    emailOptInTemplate: String

    "Email opt in enabled"
    emailOptIn: Boolean

    "Schema for contact personal information"
    contactSchema: ContactSchema

    "Organisation title (human readable name)"
    title: String

    "Name of organisation, used for lookup, can't be used to change org name"
    name: String!
  ): Org
}

type RootQueryType {
  "Get a list of campains"
  campaigns(
    "Filter campaigns by name (exact match). If found, returns list of 1 campaign, otherwise an empty list"
    name: String

    "Filter campaigns by title using LIKE format (% means any sequence of characters)"
    title: String
  ): [Campaign]

  "Get action page"
  actionPage(
    "Get action page by url the widget is displayed on (DEPRECATED, use name)"
    url: String

    "Get action page by name the widget is displayed on"
    name: String

    "Get action page by id."
    id: Int
  ): PublicActionPage

  exportActions(
    "Limit the number of returned actions"
    limit: Int

    "return only actions created at date time from this argument (inclusive)"
    after: Datetime

    "return only actions with id starting from this argument (inclusive)"
    start: Int

    "Campaign the action belongs to (unless given, get all actions)"
    campaignId: Int

    "Organization name"
    orgName: String!
  ): [Action]

  "Organization api (authenticated)"
  org(
    "Name of organisation"
    name: String!
  ): Org
}

type PublicOrg {
  "Organisation short name"
  name: String

  "Organisation title (human readable name)"
  title: String
}

type ActionPage {
  id: Int

  "Locale for the widget, in i18n format"
  locale: String

  "Name where the widget is hosted"
  name: String

  "Reference to thank you email templated of this Action Page"
  thankYouTemplateRef: String

  "List of steps in journey"
  journey: [String!]

  "Config JSON of this action page"
  config: String

  "Extra supporters (added to supporters count)"
  extraSupporters: Int

  "Campaign this widget belongs to"
  campaign: Campaign

  org: PublicOrg
}

type PublicActionPage {
  id: Int

  "Locale for the widget, in i18n format"
  locale: String

  "Name where the widget is hosted"
  name: String

  "Reference to thank you email templated of this Action Page"
  thankYouTemplateRef: String

  "List of steps in journey"
  journey: [String!]

  "Config JSON of this action page"
  config: String

  "Campaign this widget belongs to"
  campaign: Campaign

  org: PublicOrg
}

scalar Datetime

"Address type which can hold different addres fields."
input AddressInput {
  "Country code (two-letter)."
  country: String

  "Postcode, in format correct for country locale"
  postcode: String

  "Locality, which can be a city/town/village"
  locality: String

  "Region, being province, voyevodship, county"
  region: String
}

"ActionPage declaration"
input ActionPageInput {
  "Action Page id"
  id: Int

  """
  Unique NAME identifying ActionPage.

  Does not have to exist, must be unique. Can be a 'technical' identifier
  scoped to particular organization, so it does not have to change when the
  slugs/names change (eg. some.org/1234). However, frontent Widget can
  ask for ActionPage by it's current location.href (but without https://), in which case it is useful
  to make this url match the real widget location.
  """
  name: String

  "2-letter, lowercase, code of ActionPage language"
  locale: String

  "A reference to thank you email template of this ActionPage"
  thankYouTemplateRef: String

  "Extra supporter count. If you want to add a number of signatories you have offline or kept in another system, you can specify the number here."
  extraSupporters: Int

  "List of steps in the journey"
  journey: [String!]

  "JSON string containing Action Page config"
  config: String
}

type PersonalData {
  "Schema for contact personal information"
  contactSchema: ContactSchema!

  "Email opt in enabled"
  emailOptIn: Boolean!

  "Email opt in template name"
  emailOptInTemplate: String
}

type Campaign {
  id: Int

  "Internal name of the campaign"
  name: String

  "External ID (if set)"
  externalId: Int

  "Full, official name of the campaign"
  title: String

  "Campaign statistics"
  stats: CampaignStats

  "Fetch public actions"
  actions(actionType: String!): PublicActionsResult

  org: PublicOrg
}

"Encryption or sign key with integer id (database)"
type Key {
  id: Int!
  public: String!
  name: String
  expiredAt: Datetime
}

type Org {
  "Organization id"
  id: Int

  "Organisation short name"
  name: String

  "Organisation title (human readable name)"
  title: String

  personalData: PersonalData!

  keys: [Key!]!

  "List campaigns this org is leader or partner of"
  campaigns: [Campaign]

  "List action pages this org has"
  actionPages: [ActionPage]

  actionPage(name: String, id: Int): ActionPage

  "Get campaign this org is leader or partner of by id"
  campaign(id: Int): Campaign

  """
  Get signatures this org has collected.
  Provide campaign_id to only get signatures for a campaign
  XXX DEPRECATE AND REMOVE
  """
  signatures(
    "Limit the number of returned signatures"
    limit: Int

    "return only signatures created at date time from this argument (inclusive)"
    after: Datetime

    "return only signatures with id starting from this argument (inclusive)"
    start: Int

    "return only signatures for campaign id"
    campaignId: Int
  ): SignatureList
}

type ContactReference {
  "Contact's reference"
  contactRef: String

  "Contacts first name"
  firstName: String
}

type Contact {
  contactRef: String!
  payload: String
  nonce: String
  publicKey: Key
  signKey: Key
}

"Custom field with a key and value. Both are strings."
input CustomFieldInput {
  key: String!
  value: String!
  transient: Boolean
}

"Custom field with a key and value."
type CustomField {
  key: String!
  value: String!
}

"Contact information"
input ContactInput {
  "Full name"
  name: String

  "First name (when you provide full name split into first and last)"
  firstName: String

  "Last name (when you provide full name split into first and last)"
  lastName: String

  "Email"
  email: String

  "Contacts phone number"
  phone: String

  "Date of birth in format YYYY-MM-DD"
  birthDate: String

  "Contacts address"
  address: AddressInput
}
