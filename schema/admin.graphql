query ListCampaigns($org: String!) {
    org(name: $org) {
      campaigns {
        id, externalId, name, title, config,
        org { name, title }
      }
    }
  }

query ListActionPages($org: String!) {
    org(name: $org) {
      actionPages {
        id, name, locale, config,
        journey, extraSupporters, thankYouTemplateRef,
        campaign { name, externalId }
      }
    }
  }


query GetCampaign($org: String!, $id: Int!) {
    org(name: $org) {
      campaign(id: $id) {
        id, externalId, name, title, config,
        stats {
          supporterCount, 
          supporterCountByOrg { 
            org { name, title },
            count
          },
          actionCount { actionType, count }
        }
      }
    }
  }

query GetActionPage($org: String!, $id: Int, $name: String) {
    org(name: $org) {
      name, title,
      actionPage(id: $id, name: $name) {
        id,
        name,
        locale,
        extraSupporters, thankYouTemplateRef,
        journey,
        config,
        campaign { id, name, title, externalId }
      }
    }
}

query ListActionPagesByCampaign($org: String!, $campaignId: Int!) {
  org(name: $org) {
    name,
    title,
    actionPages(select: {campaignId: $campaignId}) {
      id, name, locale,
      extraSupporters, thankYouTemplateRef, journey, config,
      campaign { name, id, externalId }
    }
  }
}

query ExportCampaignActions($org: String!, $campaignId: Int, $campaignName: String,
                            $start: Int, $after: DateTime, $limit: Int,
                            $onlyOptIn: Boolean) {

      exportActions(orgName: $org, campaignId: $campaignId, campaignName: $campaignName,
                    start: $start, after: $after, limit: $limit, onlyOptIn: $onlyOptIn)
      {
        actionId, actionType, createdAt,
        contact { contactRef, payload, nonce, publicKey { id, public }, signKey { id, public } },
        fields { key, value },
        tracking { source, medium, campaign, content },
        actionPage { id, name, locale },
        privacy { optIn }
      }
}

query ExportOrgActions($org: String!, $start: Int, $after: DateTime, $limit: Int, $onlyOptIn: Boolean) {
      exportActions(orgName: $org, start: $start, after: $after, limit: $limit, onlyOptIn: $onlyOptIn)
      {
        actionId, actionType, createdAt,
        contact { contactRef, payload, nonce, publicKey { id, public }, signKey { id, public } },
        fields { key, value },
        tracking { source, medium, campaign, content },
        actionPage { id, name, locale },
        campaign { name, externalId },
        privacy { optIn }
      }
}

mutation UpdateActionPage(
      $id: Int!,
      $actionPage: ActionPageInput!
      ) {
      updateActionPage(
        id: $id,
        input: $actionPage
      )
      {
        id
      }
  }

mutation CopyActionPage($fromName: String!, $toOrg: String!, $toName: String!) {
  copyActionPage(fromName: $fromName,   name: $toName, orgName: $toOrg) {
        id,
        name,
        locale,
        extraSupporters, thankYouTemplateRef,
        journey,
        config,
        campaign { id, name, title, externalId }
  }
}

mutation JoinOrg($orgName: String!) {
  joinOrg(name: $orgName) {
    status
  }
}

mutation UpsertCampaign(
         $org: String!,
         $campaign: CampaignInput!
        ) {
        upsertCampaign(
          orgName: $org,
          input: $campaign
        ) {
          id
        }
      }


query ListKeys($org: String!){
  org(name: $org) {
    keys {
      id, name, public, active, expired, expiredAt
    }
  }
}

mutation GenerateKey($org: String!, $input:GenKeyInput!) {
  generateKey(orgName: $org, input: $input) {
    id, name, public, private, active, expired, expiredAt
  }
}

mutation AddKey($org: String!, $input: AddKeyInput!) {
  addKey(orgName:$org, input: $input) {
    id, name, public, active, expired, expiredAt
  }
}

mutation ActivateKey($org: String!, $id: Int!) {
  activateKey(orgName: $org, id: $id) {
    status
  }
}

mutation AddOrg($org: OrgInput!) {
  addOrg(input: $org) {
    id, name
  }
}

mutation UpdateOrg($orgName: String!, $org: OrgInput!) {
  updateOrg(name: $orgName, input: $org) {
    id, name, title, config,
    personalData {
      contactSchema, emailOptIn, emailOptInTemplate
    }
  }
}

subscription ActionPageUpserted($org: String) {
  actionPageUpserted(orgName: $org) {
    id, name, locale, journey, config,
    campaign { id, name, title, externalId },
    org { title }
  }
}

# Dashboard queries

query CurrentUserOrgs {
  currentUser {
    id
    email,
    roles {
    	role, org {
        id, name, title
    	}
    }
  }
}

# Deprecate
query DashOrgOverview($org: String!) {
 	org(name: $org) {
    id, name, title, config, 
    personalData {
      contactSchema, emailOptIn, emailOptInTemplate
    },
    campaigns {
      id,  externalId, name, title, org { name, title },
      config,
      stats { supporterCount }
    }
  }
}

# Get main org data 
# (could include service status?)
# 
query GetOrg($org: String!) {
  org(name: $org) {
    id, name, title, 
    config,
    personalData {
      contactSchema, emailOptIn, emailOptInTemplate
    },
    keys(select: {active: true}) { 
      id, active, expired, expiredAt, name, public
    },
    services {
      id, name, host, user, path
    }
  }
}

